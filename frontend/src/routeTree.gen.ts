/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as WorkspacesIndexImport } from './routes/workspaces/index'
import { Route as WorkspacesAddImport } from './routes/workspaces/add'
import { Route as WorkspacesWorkspaceIdImport } from './routes/workspaces/$workspaceId'
import { Route as WorkspacesWorkspaceIdLayoutImport } from './routes/workspaces/$workspaceId/_layout'
import { Route as WorkspacesWorkspaceIdLayoutIndexImport } from './routes/workspaces/$workspaceId/_layout.index'
import { Route as WorkspacesWorkspaceIdThreadsThreadIdImport } from './routes/workspaces/$workspaceId/threads/$threadId'
import { Route as WorkspacesWorkspaceIdLayoutUnassignedImport } from './routes/workspaces/$workspaceId/_layout.unassigned'
import { Route as WorkspacesWorkspaceIdLayoutMeImport } from './routes/workspaces/$workspaceId/_layout.me'
import { Route as WorkspacesWorkspaceIdLayoutLabelsLabelIdImport } from './routes/workspaces/$workspaceId/_layout.labels.$labelId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const WorkspacesIndexRoute = WorkspacesIndexImport.update({
  path: '/workspaces/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesAddRoute = WorkspacesAddImport.update({
  path: '/workspaces/add',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesWorkspaceIdRoute = WorkspacesWorkspaceIdImport.update({
  path: '/workspaces/$workspaceId',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesWorkspaceIdLayoutRoute =
  WorkspacesWorkspaceIdLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdLayoutIndexRoute =
  WorkspacesWorkspaceIdLayoutIndexImport.update({
    path: '/',
    getParentRoute: () => WorkspacesWorkspaceIdLayoutRoute,
  } as any)

const WorkspacesWorkspaceIdThreadsThreadIdRoute =
  WorkspacesWorkspaceIdThreadsThreadIdImport.update({
    path: '/threads/$threadId',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdLayoutUnassignedRoute =
  WorkspacesWorkspaceIdLayoutUnassignedImport.update({
    path: '/unassigned',
    getParentRoute: () => WorkspacesWorkspaceIdLayoutRoute,
  } as any)

const WorkspacesWorkspaceIdLayoutMeRoute =
  WorkspacesWorkspaceIdLayoutMeImport.update({
    path: '/me',
    getParentRoute: () => WorkspacesWorkspaceIdLayoutRoute,
  } as any)

const WorkspacesWorkspaceIdLayoutLabelsLabelIdRoute =
  WorkspacesWorkspaceIdLayoutLabelsLabelIdImport.update({
    path: '/labels/$labelId',
    getParentRoute: () => WorkspacesWorkspaceIdLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$workspaceId': {
      id: '/workspaces/$workspaceId'
      path: '/workspaces/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/add': {
      id: '/workspaces/add'
      path: '/workspaces/add'
      fullPath: '/workspaces/add'
      preLoaderRoute: typeof WorkspacesAddImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/': {
      id: '/workspaces/'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesIndexImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$workspaceId/_layout': {
      id: '/workspaces/$workspaceId/_layout'
      path: ''
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdLayoutImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/_layout/me': {
      id: '/workspaces/$workspaceId/_layout/me'
      path: '/me'
      fullPath: '/workspaces/$workspaceId/me'
      preLoaderRoute: typeof WorkspacesWorkspaceIdLayoutMeImport
      parentRoute: typeof WorkspacesWorkspaceIdLayoutImport
    }
    '/workspaces/$workspaceId/_layout/unassigned': {
      id: '/workspaces/$workspaceId/_layout/unassigned'
      path: '/unassigned'
      fullPath: '/workspaces/$workspaceId/unassigned'
      preLoaderRoute: typeof WorkspacesWorkspaceIdLayoutUnassignedImport
      parentRoute: typeof WorkspacesWorkspaceIdLayoutImport
    }
    '/workspaces/$workspaceId/threads/$threadId': {
      id: '/workspaces/$workspaceId/threads/$threadId'
      path: '/threads/$threadId'
      fullPath: '/workspaces/$workspaceId/threads/$threadId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdThreadsThreadIdImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/_layout/': {
      id: '/workspaces/$workspaceId/_layout/'
      path: '/'
      fullPath: '/workspaces/$workspaceId/'
      preLoaderRoute: typeof WorkspacesWorkspaceIdLayoutIndexImport
      parentRoute: typeof WorkspacesWorkspaceIdLayoutImport
    }
    '/workspaces/$workspaceId/_layout/labels/$labelId': {
      id: '/workspaces/$workspaceId/_layout/labels/$labelId'
      path: '/labels/$labelId'
      fullPath: '/workspaces/$workspaceId/labels/$labelId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdLayoutLabelsLabelIdImport
      parentRoute: typeof WorkspacesWorkspaceIdLayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  LoginRoute,
  SignupRoute,
  WorkspacesWorkspaceIdRoute: WorkspacesWorkspaceIdRoute.addChildren({
    WorkspacesWorkspaceIdLayoutRoute:
      WorkspacesWorkspaceIdLayoutRoute.addChildren({
        WorkspacesWorkspaceIdLayoutMeRoute,
        WorkspacesWorkspaceIdLayoutUnassignedRoute,
        WorkspacesWorkspaceIdLayoutIndexRoute,
        WorkspacesWorkspaceIdLayoutLabelsLabelIdRoute,
      }),
    WorkspacesWorkspaceIdThreadsThreadIdRoute,
  }),
  WorkspacesAddRoute,
  WorkspacesIndexRoute,
})

/* prettier-ignore-end */
